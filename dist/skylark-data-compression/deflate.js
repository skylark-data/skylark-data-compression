/**
 * skylark-data-compression - The skylark compression utility library
 * @author Hudaokeji Co.,Ltd
 * @version v0.9.0
 * @link www.skylarkjs.org
 * @license MIT
 */
define(["./compression","./zlib/deflate","./utils/common","./utils/strings","./zlib/messages","./zlib/zstream","./zlib/constants"],function(t,i,e,n,s,r,o){"use strict";const a=Object.prototype.toString,{Z_NO_FLUSH:u,Z_SYNC_FLUSH:h,Z_FULL_FLUSH:l,Z_FINISH:d,Z_OK:f,Z_STREAM_END:c,Z_DEFAULT_COMPRESSION:_,Z_DEFAULT_STRATEGY:p,Z_DEFLATED:w}=o;function m(t){this.options=e.assign({level:_,method:w,chunkSize:16384,windowBits:15,memLevel:8,strategy:p},t||{});let o=this.options;o.raw&&o.windowBits>0?o.windowBits=-o.windowBits:o.gzip&&o.windowBits>0&&o.windowBits<16&&(o.windowBits+=16),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new r,this.strm.avail_out=0;let u=i.deflateInit2(this.strm,o.level,o.method,o.windowBits,o.memLevel,o.strategy);if(u!==f)throw new Error(s[u]);if(o.header&&i.deflateSetHeader(this.strm,o.header),o.dictionary){let t;if(t="string"==typeof o.dictionary?n.string2buf(o.dictionary):"[object ArrayBuffer]"===a.call(o.dictionary)?new Uint8Array(o.dictionary):o.dictionary,(u=i.deflateSetDictionary(this.strm,t))!==f)throw new Error(s[u]);this._dict_set=!0}}return m.prototype.push=function(t,e){const s=this.strm,r=this.options.chunkSize;let o,_;if(this.ended)return!1;for(_=e===~~e?e:!0===e?d:u,"string"==typeof t?s.input=n.string2buf(t):"[object ArrayBuffer]"===a.call(t)?s.input=new Uint8Array(t):s.input=t,s.next_in=0,s.avail_in=s.input.length;;)if(0===s.avail_out&&(s.output=new Uint8Array(r),s.next_out=0,s.avail_out=r),(_===h||_===l)&&s.avail_out<=6)this.onData(s.output.subarray(0,s.next_out)),s.avail_out=0;else{if((o=i.deflate(s,_))===c)return s.next_out>0&&this.onData(s.output.subarray(0,s.next_out)),o=i.deflateEnd(this.strm),this.onEnd(o),this.ended=!0,o===f;if(0!==s.avail_out){if(_>0&&s.next_out>0)this.onData(s.output.subarray(0,s.next_out)),s.avail_out=0;else if(0===s.avail_in)break}else this.onData(s.output)}return!0},m.prototype.onData=function(t){this.chunks.push(t)},m.prototype.onEnd=function(t){t===f&&(this.result=e.flattenChunks(this.chunks)),this.chunks=[],this.err=t,this.msg=this.strm.msg},m.compress=function(t,i){const e=new m(i);if(e.push(t,!0),e.err)throw e.msg||s[e.err];return e.result},t.Deflate=m});
//# sourceMappingURL=sourcemaps/deflate.js.map
